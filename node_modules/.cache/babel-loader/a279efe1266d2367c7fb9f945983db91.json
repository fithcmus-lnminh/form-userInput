{"ast":null,"code":"var _jsxFileName = \"D:\\\\React Practice\\\\form-userInput\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); //->solve above problem\n  //touch means touch to the input field and work on it\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    if (enteredName.trim() !== \"\") {\n      setNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true); //only when blur -> validate input values\n\n    if (enteredName.trim() === \"\") {\n      setNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmitHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true); //only when press submit btn -> validate input value\n\n    if (enteredName.trim() === \"\") {\n      setNameIsValid(false);\n      return;\n    }\n\n    setNameIsValid(true);\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalid = !nameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"LgiCUeBZKlto+n6NHgnrvDwlEEY=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["D:/React Practice/form-userInput/src/components/SimpleInput.js"],"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","trim","nameInputChangeHandler","event","target","value","setNameIsValid","nameInputBlurHandler","formSubmitHandler","preventDefault","nameInputIsInvalid","nameIsValid","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D,CAF6B,CAEwC;AACrE;;AAEA,QAAMO,kBAAkB,GAAGJ,WAAW,CAACK,IAAZ,OAAuB,EAAlD;;AAEA,QAAMC,sBAAsB,GAAIC,KAAD,IAAW;AACxCN,IAAAA,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AAEA,QAAIT,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAND;;AAQA,QAAMC,oBAAoB,GAAG,MAAM;AACjCR,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CADiC,CACJ;;AAE7B,QAAIH,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BK,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA;AACD;AACF,GAPD;;AASA,QAAME,iBAAiB,GAAIL,KAAD,IAAW;AACnCA,IAAAA,KAAK,CAACM,cAAN;AAEAV,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CAHmC,CAGN;;AAE7B,QAAIH,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BK,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA;AACD;;AAEDA,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAT,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAZD;;AAcA,QAAMa,kBAAkB,GAAG,CAACC,WAAD,IAAgBb,kBAA3C;AAEA,QAAMc,gBAAgB,GAAGF,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;AAIA,sBACE;AAAM,IAAA,QAAQ,EAAEF,iBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEI,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,EAAE,EAAC,MAFL;AAGE,QAAA,QAAQ,EAAEV,sBAHZ;AAIE,QAAA,MAAM,EAAEK,oBAJV;AAKE,QAAA,KAAK,EAAEX;AALT;AAAA;AAAA;AAAA;AAAA,cAFF,EASGc,kBAAkB,iBACjB;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAcE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD,CAhED;;GAAMhB,W;;KAAAA,W;AAkEN,eAAeA,WAAf","sourcesContent":["import { useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false); //->solve above problem\n  //touch means touch to the input field and work on it\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n\n    if (enteredName.trim() !== \"\") {\n      setNameIsValid(true);\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true); //only when blur -> validate input values\n\n    if (enteredName.trim() === \"\") {\n      setNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmitHandler = (event) => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true); //only when press submit btn -> validate input value\n\n    if (enteredName.trim() === \"\") {\n      setNameIsValid(false);\n      return;\n    }\n\n    setNameIsValid(true);\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsInvalid = !nameIsValid && enteredNameTouched;\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmitHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}